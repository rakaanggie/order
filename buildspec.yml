version: 0.2
run as: root

env:
  variables:
    ECR_REGION: us-east-1
    CONTAINER_NAME: lks-order-container
    IMAGE_REPO: lks-order-image
    AWS_REGION: us-east-1
    
phases:
  install:
    runtime-version:
      nodejs: 16
      docker: 20
  pre_build:
    commands:
      - echo "Install Dependencies and login into ECR"
      - aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com
      - ECR_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$IMAGE_REPO
      - echo AWS_ACCESS_KEY=${AWS_ACCESS_KEY} >> .env.production
      - echo AWS_SECRET_KEY=${AWS_SECRET_KEY} >> .env.production
      - echo AWS_DYNAMODB_TABLE_PROD=${AWS_DYNAMODB_TABLE_PROD} >> lks-order-production
      - echo AWS_REGION=${AWS_REGION} >> lks-order-production
      - echo AWS_ACCESS_KEY=${AWS_ACCESS_KEY} >> .env.testing
      - echo AWS_SECRET_KEY=${AWS_SECRET_KEY} >> .env.testing
      - echo AWS_DYNAMODB_TABLE_TEST=${AWS_DYNAMODB_TABLE_TEST} >> lks-order-testing
      - echo AWS_REGION=${AWS_REGION} >> lks-order-testing
  build:
    commands:
      - echo "Run unit testing and build docker image"
      - npm install
      - npm run test
      - docker build -t $IMAGE_REPO:$IMAGE_TAG -f Dockerfile .
      - docker tag $IMAGE_REPO/$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$IMAGE_REPO:$IMAGE_TAG
  post_build:
    commands:
      - echo "push image to ECR"
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $ECR_REPO:$IMAGE_TAG > imagedefinitions.json
      - docker push $IMAGE_REPO:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$ECR_REGION.amazonaws.com/$IMAGE_REPO:$IMAGE_TAG

reports:
  test-report:
    files: 'report/test-result.xml'
    file-format: JUNITXML

artifacts:
  files: imagedefinitions.json
